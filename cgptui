//can you give me help me with a functional component for the same above code

import React, { useState } from "react";
import axios from "axios";
import {
  Container,
  Paper,
  Box,
  Grid,
  // Button,
  TextField,
  Typography,
  Link,
} from "@mui/material";
import { Send } from "@mui/icons-material";
import RefreshIcon from "@mui/icons-material/Refresh";

const Chatbot = () => {
  const [input, setInput] = useState("");
  const [messageHistory, setMessageHistory] = useState([]);

  const handleInputChange = (event) => {
    setInput(event.target.value);
  };

  const handleAnswerChange = (e) => {
    if (e.code === "Enter") {
      sendPostRequest();
    }
  };

  const handleClear = (event) => {
    setMessageHistory([]);
  };

  const sendPostRequest = () => {
    axios
      .post(
        "https://6rzzjwudya.execute-api.us-east-1.amazonaws.com/DEV/lexbot",
        { Ques: input }
      )
      .then((response) => {
        const faqResponse = response.data;
        const parsedResponse = JSON.parse(
          response.data.replace(/'/g, '"').split("\n")[1]
        );
        setMessageHistory([
          ...messageHistory,
          { Ques: input, response: parsedResponse },
        ]);
        setInput(""); // Clear input after sending message

        console.log(parsedResponse.Link);
        console.log(parsedResponse.Summary);
        // console.log(parsedResponse.Header);
        // console.log(parsedResponse.Title);
      })
      .catch((error) => {
        console.error(error);
      });
  };

  //need to fix the bot height
  //add a header to the bot

  return (
    <Container
      maxWidth="lg"
      sx={{
        bgcolor: "whitesmoke",
        height: "100vh",
      }}
    >
      <Grid
        container
        height="100vh"
        bgcolor="#dce1fe"
        // bgcolor="maroon"
        // f6f8ff
        padding="1rem"
        justifyContent="flex-end"
        alignItems="flex-end"
      >
        <Paper elevation={8}>
          <Box width="25rem">
            <Box
              sx={{
                bgcolor: "red",
                padding: "0.5rem",
                // marginTop: "1rem",
              }}
            >
              <Typography
                color="white"
                fontWeight="bold"
                variant="h6"
                component="span"
              >
                LILLY
              </Typography>
            </Box>

            <Box
              sx={{
                padding: "1rem",
                height: "200px",
                overflow: "hidden",
                overflowY: "scroll",
                background: "Azure",
              }}
            >
              {messageHistory.map((message, index) =>
                message.parsedResponse ? (
                  <Box key={index}>
                    <Typography
                      color="blue"
                      align="right"
                      fontSize="1rem"
                      fontFamily="comic sans ms"
                    >
                      <p>{message.Ques}</p>
                    </Typography>
                    <Typography
                      color="maroon"
                      fontSize="1rem"
                      fontFamily="comic sans ms"
                      style={{ lineBreak: "anywhere" }}
                    >
                      <p>{message.response.Summary}</p>
                    </Typography>
                    <Typography
                      fontSize="1rem"
                      fontFamily="comic sans ms"
                      style={{ lineBreak: "anywhere" }}
                    >
                      <Link
                        href={message.response.Link}
                        underline="hover"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        {message.response.Link}
                      </Link>
                    </Typography>
                  </Box>
                ) : (
                  <p>{message.faqResponse}</p>
                )
              )}

            </Box>

            <Box
              sx={{
                flexGrow: 1,
                padding: "1rem",
                background: "Azure",
              }}
            >
              <Grid container justifyContent="flex-end">
                <TextField
                  variant="outlined"
                  size="small"
                  fullWidth
                  value={input}
                  autoComplete="false"
                  onChange={handleInputChange}
                  onKeyDown={handleAnswerChange}
                  sx={{ background: "white" }}
                />
                {/* <Button
                  sx={{ marginLeft: "1rem" }}
                  variant="outline"
                  onClick={sendPostRequest}
                  color="secondary"
                  size="large"
                > */}
                <RefreshIcon
                  fontSize="large"
                  onClick={handleClear}
                  sx={{
                    marginX: "1rem",
                    marginY: "0.5rem",
                    cursor: "pointer",
                    color: "red",
                  }}
                />
                <Send
                  onClick={sendPostRequest}
                  fontSize="large"
                  sx={{
                    // marginX: "1rem",
                    marginY: "0.5rem",
                    cursor: "pointer",
                    color: "red",
                  }}
                />
                {/* </Button> */}
                {/* <Button
                  sx={{ marginLeft: "1rem" }}
                  variant="outline"
                  onClick={handleClear}
                  color="secondary" 
                >*/}

                {/* </Button> */}
              </Grid>
            </Box>
          </Box>
        </Paper>
      </Grid>
    </Container>
  );
};

export default Chatbot;

// "https://6rzzjwudya.execute-api.us-east-1.amazonaws.com/DEV/lexbot",



const sendPostRequest = () => {
    axios
      .post(
        "https://6rzzjwudya.execute-api.us-east-1.amazonaws.com/DEV/lexbot",
        { Ques: input }
      )
      .then((response) => {
        const faqResponse = response.data;
        const parsedResponse = JSON.parse(
          response.data.replace(/'/g, '"').split("\n")[1]
        );

        if (parsedResponse.Link) {
          setMessageHistory([
            ...messageHistory,
            {
              Ques: input,
              response: { Summary: parsedResponse.Summary, Link: parsedResponse.Link },
              parsedResponse: true,
            },
          ]);
        } else {
          setMessageHistory([
            ...messageHistory,
            {
              Ques: input,
              response: faqResponse,
              parsedResponse: false,
            },
          ]);
        }
        setInput(""); // Clear input after sending message
      })
      .catch((error) => {
        console.error(error);
      });
  };


////return


<Box
  sx={{
    padding: "1rem",
    height: "200px",
    overflow: "hidden",
    overflowY: "scroll",
    background: "Azure",
  }}
>
  {messageHistory.map((message, index) =>
    message.parsedResponse ? (
      <Box key={index}>
        <Typography
          color="blue"
          align="right"
          fontSize="1rem"
          fontFamily="comic sans ms"
        >
          <p>{message.Ques}</p>
        </Typography>
        <Typography
          color="maroon"
          fontSize="1rem"
          fontFamily="comic sans ms"
          style={{ lineBreak: "anywhere" }}
        >
          <p>{message.response.Summary}</p>
        </Typography>
        <Typography
          fontSize="1rem"
          fontFamily="comic sans ms"
          style={{ lineBreak: "anywhere" }}
        >
          <Link
            href={message.response.Link}
            underline="hover"
            rel="noopener noreferrer"
            target="_blank"
          >
            {message.response.Link}
          </Link>
        </Typography>
      </Box>
    ) : (
      <Typography
        key={index}
        color="blue"
        align="right"
        fontSize="1rem"
        fontFamily="comic sans ms"
      >
        <p>{message.response}</p>
      </Typography>
    )
  )}
</Box>


//updated header in axios
const sendPostRequest = () => {
  axios
    .post(
      "https://6rzzjwudya.execute-api.us-east-1.amazonaws.com/DEV/lexbot",
      { Ques: input }
    )
    .then((response) => {
      const contentType = response.headers["content-type"];
      if (contentType && contentType.indexOf("application/json") !== -1) {
        const parsedResponse = response.data;
        setMessageHistory([
          ...messageHistory,
          { Ques: input, response: parsedResponse },
        ]);
        setInput(""); // Clear input after sending message
      } else {
        const faqResponse = response.data;
        setMessageHistory([
          ...messageHistory,
          { Ques: input, faqResponse },
        ]);
        setInput(""); // Clear input after sending message
      }
    })
    .catch((error) => {
      console.error(error);
    });
};


//new send request
 const sendPostRequest = async () => {
    try {
      const response = await axios.post(
        "https://6rzzjwudya.execute-api.us-east-1.amazonaws.com/DEV/lexbot",
        { Ques: input }
      );

      let parsedResponse = "";
      if (response.data.includes("Link")) {
        parsedResponse = JSON.parse(
          response.data.replace(/'/g, '"').split("\n")[1]
        );
      } else if (response.data) {
        parsedResponse = response.data;
      }

      setMessageHistory([
        ...messageHistory,
        { Ques: input, response: parsedResponse },
      ]);
      setInput(""); // Clear input after sending message
    } catch (error) {
      console.error(error);
      setMessageHistory([
        ...messageHistory,
        {
          Ques: input,
          response: `Error: ${"there are no particular files related to this"}`,
        },
      ]);
      setInput(""); // Clear input after sending message
    }
  };


response 1: 
"Please find the result for the query below\n{'Link': 'https://lilly-confluence.atlassian.net/wiki/spaces/EDB/pages/904005069/Code+Testing', 'Page Title': 'Code Testing', 'Summary': 'Now we are going to now move onto with \"Code Testing\", focusing on: 1.     Code Testing for Node using jest. 2.     Code Testing for Python using pytest.Step 3 - Let\\'s get testing ..Python is a little bit more simple then Node when it comes to testing  it follows a similar process and flow to the node testing above.'}"

response 2:
"Please find the result for the query below\n{'Link': 'https://lilly-confluence.atlassian.net/wiki/spaces/EDB/pages/904006641/Data+Ingestion', 'Page Title': 'Data Ingestion', 'Summary': 'LIVE  HEADER:Table of Contents   Data Ingestion#Introduction Common Features Process Flow Data Ingestion#Patterns    HEADER:1.network level security to restrict data flow  ServiceNow Integration for raising incidents on any failure during the data flowCustomer can configure incident level for their data setIntegration with ABCfor raising incidents on any failure during the data flowCustomer can configure incident level for their data setIntegration with ABC Framework to track the data flow status for operational monitoring'}"

response 3:
"You can login using the link https://aws-login.am.lilly.com/awsauth/awslogin.php and selecting your CA id , the AWS account along with the corresponding role.Please make sure you have completed all the pre-requisites steps as per the on boarding deck."


//chatgpt response
const sendPostRequest = async () => {
  try {
    const response = await axios.post(
      "https://6rzzjwudya.execute-api.us-east-1.amazonaws.com/DEV/lexbot",
      { Ques: input }
    );

    const parsedResponse = JSON.parse(response.data.replace(/'/g, '"').split("\n")[1] || response.data);

    setMessageHistory([
      ...messageHistory,
      { Ques: input, response: parsedResponse },
    ]);
  } catch (error) {
    console.error(error);
    setMessageHistory([
      ...messageHistory,
      {
        Ques: input,
        response: `Error: ${"there are no particular files related to this"}`,
      },
    ]);
  }
  setInput(""); // Clear input after sending message
};

//handle non json as well
const sendPostRequest = async () => {
  try {
    const response = await axios.post(
      "https://6rzzjwudya.execute-api.us-east-1.amazonaws.com/DEV/lexbot",
      { Ques: input }
    );

    let parsedResponse = response.data;
    if (response.headers["content-type"] === "application/json") {
      parsedResponse = JSON.parse(response.data.replace(/'/g, '"').split("\n")[1] || response.data);
    }

    setMessageHistory([
      ...messageHistory,
      { Ques: input, response: parsedResponse },
    ]);
  } catch (error) {
    console.error(error);
    setMessageHistory([
      ...messageHistory,
      {
        Ques: input,
        response: `Error: ${"there are no particular files related to this"}`,
      },
    ]);
  }
  setInput(""); // Clear input after sending message
};


//regex for axios response
const sendPostRequest = async () => {
  try {
    const response = await axios.post(
      "https://6rzzjwudya.execute-api.us-east-1.amazonaws.com/DEV/lexbot",
      { Ques: input }
    );

    let parsedResponse = response.data;
    const contentType = response.headers["content-type"];

    if (contentType === "application/json") {
      const jsonString = response.data.match(/\{(.|\n)*\}/);
      if (jsonString) {
        try {
          parsedResponse = JSON.parse(jsonString[0]);
        } catch (e) {
          console.error(e);
          parsedResponse = response.data;
        }
      }
    } else {
      const stringResponse = response.data.replace(/\n.*$/, '');
      if (stringResponse !== response.data) {
        parsedResponse = stringResponse;
      }
    }

    setMessageHistory([
      ...messageHistory,
      { Ques: input, response: parsedResponse },
    ]);
  } catch (error) {
    console.error(error);
    setMessageHistory([
      ...messageHistory,
      {
        Ques: input,
        response: `Error: ${"there are no particular files related to this"}`,
      },
    ]);
  }
  setInput(""); // Clear input after sending message
};






regex//

const response = "Please find the result for the query below\n{'Link': 'https://lilly-confluence.atlassian.net/wiki/spaces/EDB/pages/904005069/Code+Testing', 'Page Title': 'Code Testing', 'Summary': 'Now we are going to now move onto with \"Code Testing\", focusing on: 1.     Code Testing for Node using jest. 2.     Code Testing for Python using pytest.Step 3 - Let\\'s get testing ..Python is a little bit more simple then Node when it comes to testing  it follows a similar process and flow to the node testing above.'}";

let parsedResponse = response;
const jsonString = response.match(/\{(.|\n)*\}/);
if (jsonString) {
  try {
    parsedResponse = JSON.parse(jsonString[0]);
  } catch (e) {
    console.error(e);
  }
}

console.log(parsedResponse); // Will output the parsed JSON object if present or the original string response
