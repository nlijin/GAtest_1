import React, { useState } from "react";
import axios from "axios";
import {
  Container,
  Paper,
  Box,
  Grid,
  // Button,
  TextField,
  Typography,
  Link,
} from "@mui/material";
import { Send } from "@mui/icons-material";
import RefreshIcon from "@mui/icons-material/Refresh";
import MinimizeIcon from "@mui/icons-material/Minimize";
import RestoreIcon from "@mui/icons-material/Restore";
// import CircularProgress from "./Progress";

const Chatbot = () => {
  const [input, setInput] = useState("");
  const [messageHistory, setMessageHistory] = useState([]);
  const [isMinimized, setIsMinimized] = useState(false);

  const handleInputChange = (event) => {
    setInput(event.target.value);
  };

  const handleAnswerChange = (e) => {
    if (e.code === "Enter") {
      sendPostRequest();
    }
  };

  const handleClear = (event) => {
    setMessageHistory([]);
  };

  const toggleMinimized = () => {
    setIsMinimized(!isMinimized);
  };

  const sendPostRequest = async () => {
    try {
      const response = await axios.post(
        "https://6rzzjwudya.execute-api.us-east-1.amazonaws.com/DEV/lexbot",
        { Ques: input }
      );

      let parsedResponse = "";
      if (response.data.includes("Link")) {
        parsedResponse = JSON.parse(
          response.data.replace(/'/g, '"').split("\n")[1]
        );
      } else if (response.data) {
        parsedResponse = response.data;
      } else if (response.data.errorType === "KeyError") {
        parsedResponse = "no documents found related to this";
      } else {
        parsedResponse = "there are no particular files related to this";
      }

      setMessageHistory([
        ...messageHistory,
        { Ques: input, response: parsedResponse },
      ]);
      setInput(""); // Clear input after sending message
    } catch (error) {
      console.error(error);
      setMessageHistory([
        ...messageHistory,
        {
          Ques: input,
          response: `Error: ${"there are no particular files related to this"}`,
        },
      ]);
      setInput(""); // Clear input after sending message
    }
  };

  //need to fix the bot height
  //add a header to the bot

  return (
    <Container
      maxWidth="lg"
      sx={{
        bgcolor: "whitesmoke",
        height: "100vh",
      }}
    >
      <Grid
        container
        height="100vh"
        bgcolor="#dce1fe"
        // bgcolor="maroon"
        // f6f8ff
        padding="1rem"
        justifyContent="flex-end"
        alignItems="flex-end"
      >
        <Paper elevation={8}>
          <Box width="25rem">
            <Box
              sx={{
                bgcolor: "red",
                paddingX: "1rem",
                paddingY: "1rem",
                // marginTop: "1rem",
              }}
            >
              <Typography
                color="white"
                fontWeight="bold"
                variant="h6"
                component="span"
                // fontFamily="roboto"
              >
                Lilly
              </Typography>
              <button onClick={toggleMinimized}>
                {isMinimized ? "+" : "-"}
              </button>
            </Box>

            <Box
              sx={{
                padding: "1rem",
                height: "200px",
                overflow: "hidden",
                overflowY: "scroll",
                background: "Azure",
              }}
            >
              {messageHistory.map((message, index) =>
                message.response.Link ? (
                  <Box key={index}>
                    <Typography
                      color="blue"
                      align="right"
                      fontSize="1rem"
                      fontFamily="Calibri"
                    >
                      <p>{message.Ques}</p>
                    </Typography>

                    <Typography
                      color="maroon"
                      fontSize="1rem"
                      fontFamily="Calibri"
                      style={{ lineBreak: "anywhere" }}
                    >
                      <p>{message.response.Summary}</p>
                    </Typography>
                    <Typography
                      fontSize="1rem"
                      fontFamily="Calibri"
                      style={{ lineBreak: "anywhere" }}
                    >
                      <Link
                        href={message.response.Link}
                        underline="hover"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        {message.response.Link}
                      </Link>
                    </Typography>
                  </Box>
                ) : (
                  <Box key={index}>
                    <Typography
                      color="blue"
                      align="right"
                      fontSize="1rem"
                      fontFamily="Calibri"
                    >
                      <p>{message.Ques}</p>
                    </Typography>

                    <Typography
                      color="maroon"
                      fontSize="1rem"
                      fontFamily="Calibri"
                      style={{ lineBreak: "anywhere" }}
                    >
                      <p>{message.response}</p>
                    </Typography>
                  </Box>
                )
              )}
            </Box>

            <Box
              sx={{
                flexGrow: 1,
                padding: "1rem",
                background: "Azure",
              }}
            >
              <Grid container justifyContent="flex-end">
                <TextField
                  variant="outlined"
                  size="small"
                  fullWidth
                  value={input}
                  autoComplete="false"
                  onChange={handleInputChange}
                  onKeyDown={handleAnswerChange}
                  sx={{ background: "white" }}
                />
                {/* <CircularProgress /> */}
                {/* <Button
                  sx={{ marginLeft: "1rem" }}
                  variant="outline"
                  onClick={sendPostRequest}
                  color="secondary"
                  size="large"
                > */}
                <RefreshIcon
                  fontSize="large"
                  onClick={handleClear}
                  sx={{
                    marginX: "1rem",
                    marginY: "0.5rem",
                    cursor: "pointer",
                    color: "red",
                  }}
                />
                <Send
                  onClick={sendPostRequest}
                  fontSize="large"
                  sx={{
                    // marginX: "1rem",
                    marginY: "0.5rem",
                    cursor: "pointer",
                    color: "red",
                  }}
                />
                {/* </Button> */}
                {/* <Button
                  sx={{ marginLeft: "1rem" }}
                  variant="outline"
                  onClick={handleClear}
                  color="secondary" 
                >*/}

                {/* </Button> */}
              </Grid>
            </Box>
          </Box>
        </Paper>
      </Grid>
    </Container>
  );
};

export default Chatbot;


//only return code with minimize functionality added

return (
  <Container
    maxWidth="lg"
    sx={{
      bgcolor: "whitesmoke",
      height: "100vh",
    }}
  >
    <Grid
      container
      height={isMinimized ? "2.5rem" : "100vh"}
      bgcolor="#dce1fe"
      padding="1rem"
      justifyContent="flex-end"
      alignItems="flex-end"
    >
      <Paper elevation={8}>
        <Box width="25rem">
          <Box
            sx={{
              bgcolor: "red",
              paddingX: "1rem",
              paddingY: "1rem",
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
            }}
          >
            <Typography
              color="white"
              fontWeight="bold"
              variant="h6"
              component="span"
            >
              Lilly
            </Typography>
            <div>
              {isMinimized ? (
                <RestoreIcon onClick={toggleMinimized} />
              ) : (
                <>
                  <MinimizeIcon onClick={toggleMinimized} />
                  <RefreshIcon onClick={handleClear} />
                </>
              )}
            </div>
          </Box>

          {!isMinimized && (
            <Box
              sx={{
                padding: "1rem",
                height: "200px",
                overflow: "hidden",
                overflowY: "scroll",
                background: "Azure",
              }}
            >
              {messageHistory.map((message, index) =>
                message.response.Link ? (
                  <Box key={index}>
                    <Typography
                      color="blue"
                      align="right"
                      fontSize="1rem"
                      fontFamily="Calibri"
                    >
                      <p>{message.Ques}</p>
                    </Typography>

                    <Typography
                      color="maroon"
                      fontSize="1rem"
                      fontFamily="Calibri"
                      style={{ lineBreak: "anywhere" }}
                    >
                      <p>{message.response.Summary}</p>
                    </Typography>
                    <Typography
                      fontSize="1rem"
                      fontFamily="Calibri"
                      style={{ lineBreak: "anywhere" }}
                    >
                      <Link
                        href={message.response.Link}
                        underline="hover"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        {message.response.Link}
                      </Link>
                    </Typography>
                  </Box>
                ) : (
                  <Box key={index}>
                    <Typography
                      color="blue"
                      align="right"
                      fontSize="1rem"
                      fontFamily="Calibri"
                    >
                      <p>{message.Ques}</p>
                    </Typography>

                    <Typography
                      color="maroon"
                      fontSize="1rem"
                      fontFamily="Calibri"
                      style={{ lineBreak: "anywhere" }}
                    >
                      <p>{message.response}</p>
                    </Typography>
                  </Box>
                )
              )}
            </Box>
          )}

          {!isMinimized && (
            <Box
              sx={{
                flexGrow: 1,
                padding: "1rem",
                background: "Azure",
              }}
            >
              <Grid container justifyContent="flex-end">
                <TextField
                  variant="outlined"
                  size="small"
                  fullWidth
                  value={input}
                  autoComplete="false"
                  onChange={handleInputChange}
                  onKeyDown={handleAnswerChange}
                  sx={{ background: "white" }}
                />
                <Send onClick={sendPostRequest} color="action" />
                {/* <CircularProgress /> */}
              </Grid>
            </Box>
          )}
        </Box>
      </Paper>
    </Grid>
