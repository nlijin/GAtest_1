import { useState } from 'react';
import { TextField, Button, Box } from '@material-ui/core';

interface Props {
  onSubmit: (inputValues: string[]) => void;
}

const DynamicInputsForm: React.FC<Props> = ({ onSubmit }) => {
  const [inputValues, setInputValues] = useState<string[]>(['', '', '', '']);

  const handleChange = (index: number, value: string) => {
    const newInputValues = [...inputValues];
    newInputValues[index] = value;
    setInputValues(newInputValues);
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    onSubmit(inputValues);
  };

  return (
    <form onSubmit={handleSubmit}>
      <Box display="flex" flexDirection="row">
        <TextField
          label="Project Name"
          variant="outlined"
          value={inputValues[0]}
          onChange={(event) => handleChange(0, event.target.value)}
          style={{ marginRight: '8px' }}
        />
        <TextField
          label="Epic"
          variant="outlined"
          value={inputValues[1]}
          onChange={(event) => handleChange(1, event.target.value)}
          style={{ marginRight: '8px' }}
        />
        <TextField
          label="Assignee"
          variant="outlined"
          value={inputValues[2]}
          onChange={(event) => handleChange(2, event.target.value)}
          style={{ marginRight: '8px' }}
        />
        <TextField
          label="Jira Secret Key"
          variant="outlined"
          value={inputValues[3]}
          onChange={(event) => handleChange(3, event.target.value)}
          style={{ marginRight: '8px' }}
        />
        <Button variant="contained" color="primary" type="submit">
          Submit
        </Button>
      </Box>
    </form>
  );
};

export default DynamicInputsForm;



import React, { useState } from 'react';

interface Props {
  onTestPlanChange: (testPlan: TestPlan) => void;
}

interface TestPlan {
  testPlanId: string;
  testCaseIds: string[];
}

const TestPlanInput: React.FC<Props> = ({ onTestPlanChange }) => {
  const [testPlan, setTestPlan] = useState<TestPlan>({ testPlanId: '', testCaseIds: [] });

  const handleTestPlanIdChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newTestPlanId = event.target.value;
    setTestPlan(prevTestPlan => ({ ...prevTestPlan, testPlanId: newTestPlanId }));
    onTestPlanChange(testPlan);
  };

  const handleTestCaseIdChange = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {
    const newTestCaseId = event.target.value;
    setTestPlan(prevTestPlan => {
      const newTestCaseIds = [...prevTestPlan.testCaseIds];
      newTestCaseIds[index] = newTestCaseId;
      return { ...prevTestPlan, testCaseIds: newTestCaseIds };
    });
    onTestPlanChange(testPlan);
  };

  return (
    <div>
      <div>
        <label htmlFor="testPlanIdInput">Test Plan id:</label>
        <input
          id="testPlanIdInput"
          type="text"
          value={testPlan.testPlanId}
          onChange={handleTestPlanIdChange}
        />
      </div>
      {testPlan.testCaseIds.map((testCaseId, index) => (
        <div key={index}>
          <label htmlFor={`testCaseIdInput${index}`}>Test Case {index + 1} id:</label>
          <input
            id={`testCaseIdInput${index}`}
            type="text"
            value={testCaseId}
            onChange={event => handleTestCaseIdChange(event, index)}
          />
        </div>
      ))}
      <div>
        <button
          onClick={() =>
            setTestPlan(prevTestPlan => ({ ...prevTestPlan, testCaseIds: [...prevTestPlan.testCaseIds, ''] }))
          }
        >
          Add Test Case
        </button>
      </div>
    </div>
  );
};

export default TestPlanInput;


