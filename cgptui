import React, { useState } from 'react';
import axios from 'axios';
import './ChatApp.css';

function ChatApp() {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');

  const handleNewMessageChange = (event) => {
    setNewMessage(event.target.value);
  };

  const handleSendMessage = async () => {
    if (newMessage === '') {
      return;
    }

    const messageObject = {
      message: newMessage,
    };

    try {
      const response = await axios.post('https://example.com/api/messages', messageObject);
      setMessages([...messages, { message: newMessage, sender: 'user' }, { message: response.data.message, sender: 'bot' }]);
      setNewMessage('');
    } catch (error) {
      console.log(error);
    }
  };

  return (
    <div className="chat-container">
      <div className="chat-messages-container">
        {messages.map((message, index) => (
          <div key={index} className={`chat-message ${message.sender}`}>
            {message.message}
          </div>
        ))}
      </div>
      <div className="chat-input-container">
        <input type="text" className="chat-input" placeholder="Type a message..." value={newMessage} onChange={handleNewMessageChange} />
        <button className="chat-send-button" onClick={handleSendMessage}>
          Send
        </button>
      </div>
    </div>
  );
}

export default ChatApp;


CSS
.chat-container {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.chat-messages-container {
  display: flex;
  flex-direction: column;
  overflow-y: auto;
  padding: 10px;
  flex-grow: 1;
}

.chat-message {
  max-width: 70%;
  margin: 5px;
  padding: 10px;
  border-radius: 10px;
  display: inline-block;
  position: relative;
  font-size: 16px;
}

.chat-message.user {
  background-color: #80bfff;
  color: white;
  align-self: flex-end;
}

.chat-message.bot {
  background-color: #f2f2f2;
  color: black;
}

.chat-message.user::before {
  content: "";
  position: absolute;
  right: 100%;
  top: 50%;
  border-style: solid;
  border-width: 10px 0 10px 10px;
  border-color: transparent transparent transparent #80bfff;
  transform: translateY(-50%);
}

.chat-message.bot::before {
  content: "";
  position: absolute;
  left: 100%;
  top: 50%;
  border-style: solid;
  border-width: 10px 10px 10px 0;
  border-color: transparent #f2f2f2 transparent transparent;
  transform: translateY(-50%);
}

.chat-input-container {
  display: flex;
  padding: 10px;
}

.chat-input {
  flex-grow: 1;
  padding: 10px;
  font-size: 16px;
  border-radius: 10px;
  border: none;
  outline: none;
}

.chat-send-button {
  background-color: #80bfff;
  color: white;
  padding: 10px;
  border: none;
  border-radius: 10px;
  margin-left: 10px;
  cursor: pointer;
  font-size: 16px;
}

.chat-send-button:hover {
  background-color: #0066cc;
}


typescript
import React, { useState } from 'react';
import { TextField, Button, Box } from '@material-ui/core';

interface MyFormProps {
  onSubmit: (data: FormData) => void;
}

interface FormData {
  input1: string;
  input2: string;
  input3: string;
  input4: string;
}

const MyForm: React.FC<MyFormProps> = ({ onSubmit }) => {
  const [formData, setFormData] = useState<FormData>({
    input1: '',
    input2: '',
    input3: '',
    input4: '',
  });

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    onSubmit(formData);
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setFormData(prevState => ({ ...prevState, [name]: value }));
  };

  return (
    <form onSubmit={handleSubmit}>
      <Box display="flex" flexDirection="column" alignItems="center">
        <TextField
          label="Input 1"
          name="input1"
          value={formData.input1}
          onChange={handleInputChange}
          margin="normal"
          variant="outlined"
        />
        <TextField
          label="Input 2"
          name="input2"
          value={formData.input2}
          onChange={handleInputChange}
          margin="normal"
          variant="outlined"
        />
        <TextField
          label="Input 3"
          name="input3"
          value={formData.input3}
          onChange={handleInputChange}
          margin="normal"
          variant="outlined"
        />
        <TextField
          label="Input 4"
          name="input4"
          value={formData.input4}
          onChange={handleInputChange}
          margin="normal"
          variant="outlined"
        />
        <Button type="submit" variant="contained" color="primary">
          Submit
        </Button>
      </Box>
    </form>
  );
};

export default MyForm;


new form
import React, { useState } from 'react';

interface MyFormProps {
  onSubmit: (data: FormData) => void;
}

interface FormData {
  input1: string;
  input2: string;
  input3: string;
  input4: string;
}

const MyForm: React.FC<MyFormProps> = ({ onSubmit }) => {
  const [formData, setFormData] = useState<FormData>({
    input1: '',
    input2: '',
    input3: '',
    input4: '',
  });

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    onSubmit(formData);
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setFormData(prevState => ({ ...prevState, [name]: value }));
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>
          Input 1:
          <input
            type="text"
            name="input1"
            value={formData.input1}
            onChange={handleInputChange}
          />
        </label>
      </div>
      <div>
        <label>
          Input 2:
          <input
            type="text"
            name="input2"
            value={formData.input2}
            onChange={handleInputChange}
          />
        </label>
      </div>
      <div>
        <label>
          Input 3:
          <input
            type="text"
            name="input3"
            value={formData.input3}
            onChange={handleInputChange}
          />
        </label>
      </div>
      <div>
        <label>
          Input 4:
          <input
            type="text"
            name="input4"
            value={formData.input4}
            onChange={handleInputChange}
          />
        </label>
      </div>
      <button type="submit">Submit</button>
    </form>
  );
};

export default MyForm;


import React from 'react';
import MyForm from './MyForm';

interface FormValues {
  input1: string;
  input2: string;
  input3: string;
  input4: string;
}

const onSubmit = (data: FormValues) => {
  // Do something with the form data
  console.log(data);
};

const App: React.FC = () => {
  return (
    <div>
      <MyForm onSubmit={onSubmit} />
    </div>
  );
};

export default App;

with up and down buttons
import React, { useState } from 'react';
import { Button, Grid, TextField } from '@material-ui/core';

interface MyFormProps {
  onSubmit: (data: FormData) => void;
}

interface FormData {
  input1: string;
  input2: string;
  input3: string;
  input4: string;
}

const MyForm: React.FC<MyFormProps> = ({ onSubmit }) => {
  const [formData, setFormData] = useState<FormData>({
    input1: '',
    input2: '',
    input3: '',
    input4: '',
  });

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    onSubmit(formData);
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setFormData(prevState => ({ ...prevState, [name]: value }));
  };

  const handleUploadClick = () => {
    console.log('Upload button clicked');
    // Implement upload functionality here
  };

  const handleDownloadClick = () => {
    console.log('Download button clicked');
    // Implement download functionality here
  };

  return (
    <form onSubmit={handleSubmit}>
      <Grid container spacing={2}>
        <Grid item xs={12}>
          <TextField
            label="Input 1"
            variant="outlined"
            name="input1"
            value={formData.input1}
            onChange={handleInputChange}
            fullWidth
          />
        </Grid>
        <Grid item xs={12}>
          <TextField
            label="Input 2"
            variant="outlined"
            name="input2"
            value={formData.input2}
            onChange={handleInputChange}
            fullWidth
          />
        </Grid>
        <Grid item xs={12}>
          <TextField
            label="Input 3"
            variant="outlined"
            name="input3"
            value={formData.input3}
            onChange={handleInputChange}
            fullWidth
          />
        </Grid>
        <Grid item xs={12}>
          <TextField
            label="Input 4"
            variant="outlined"
            name="input4"
            value={formData.input4}
            onChange={handleInputChange}
            fullWidth
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <Button variant="contained" color="primary" onClick={handleUploadClick}>
            Upload
          </Button>
        </Grid>
        <Grid item xs={12} sm={6}>
          <Button variant="contained" color="primary" onClick={handleDownloadClick}>
            Download
          </Button>
        </Grid>
        <Grid item xs={12}>
          <Button type="submit" variant="contained" color="primary">
            Submit
          </Button>
        </Grid>
      </Grid>
    </form>
  );
};

export default MyForm;
